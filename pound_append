#!/usr/bin/env ruby 

# == Synopsis 
#   Allows you to programmatically add new sites to a pound configuration file
#
# == Examples
#   This will add a new site to the configuration file running port 10200 matching requests "(www\.|)site\.com"
#   So this would link both requests coming from www.site.com and site.com to go to 127.0.0.1:10200
#
#     pound_append "(www\.|)site\.com" 10200
# == Usage 
#   pound_append site_match local_port [options]
#
#   For help use: pound_append -h
#
# == Options
#   -c, --config-path   [NOT COMPLETED] Defaults to /etc/pound/pound.cfg 
#   -h, --help          Displays help message
#   -v, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -V, --verbose       Verbose output
#
# == Author
#   David Jones, http://www.d-jones.com
#   Credits to Todd Weth (http://blog.infinitered.com) for the command-line application skeleton
#
# == Copyright
#   Copyright (c) 2008 David Jones. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

require 'optparse' 
require 'rdoc/usage'
require 'ostruct'
require 'date'


class App
  VERSION = '0.0.1'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
    if parsed_options? && arguments_valid? 
      puts "Start at #{DateTime.now}\\n\\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
            
      process_arguments            
      process_command
      
      puts "\\nFinished at #{DateTime.now}" if @options.verbose
    else
      output_usage
    end
  end
  
  protected
  
    def parsed_options?
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
      opts.parse!(@arguments) rescue return false

      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.size > 1
    end
    
    # Setup the arguments
    def process_arguments
      # TO DO - place in local vars, etc
    end
    
    def output_help
      output_version
      RDoc::usage() #exits app
    end
    
    def output_usage
      RDoc::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      site_match = @arguments[0]
      port = @arguments[1]
      config = @options.confg || "/etc/pound/pound.cfg"
      
      if @options.verbose
        puts "The site to match is: #{site_match}"
        puts "Request matching that site will be calling 127.0.0.1:#{port}"
        puts "The configuration file is located at #{config}"
        puts "Opening pound configuration file"
      end      

      # Open the configuration file into an array of lines
      config_lines = IO.readlines(config)
      
      # Pop lines off the end until we pop the last "end" off
      result = ""
      while(!(result =~ /.*end.*/)) do
        result = config_lines.pop
      end
      
      puts "Removed the last 'end' in the configuration" if @options.verbose

      # adds the configuration
      config_lines << "                \n"
      config_lines << "        Service\n"
      config_lines << "                HeadRequire \"Host: #{site_match}\"\n"
      config_lines << "                \n"
      config_lines << "                BackEnd\n"
      config_lines << "                        Address 127.0.0.1\n"
      config_lines << "                        Port #{port}\n"
      config_lines << "                End\n"
      config_lines << "        end\n"
      config_lines << "end\n"

      puts "Writing to the pound configuration file:" if @options.verbose

      File.open(config, "w") do |file|
          config_lines.each do |line|
            puts "Wrote: #{line}" if @options.verbose
            file.write(line)
          end
      end
      
      puts "Configuration complete."
      puts "#{site_match} will now call 127.0.0.1:#{port}"
    end

    def process_standard_input
      input = @stdin.read      

    end
end

# Create and run the application
app = App.new(ARGV, STDIN)
app.run